What should happen when you delete a reservation?

 - Keep everything intact, but mark the reservation as inactive? When querying for available rooms and such, we'll have to check to make sure the res_rooms as inactive too.

We should be able to access past customers from a list when making new reservations to limit duplicate customers.

When updating a reservation, should the confirmation codes be editable? No.

Do we need the resRoomsController? Should all those routes be included on the api/reservations route?

All rooms associated with a reservation should have the same confirmation number as the first room on that reservation. When rooms are assigned, each room after the first will be assigned its own confirmation number.

We need to get history working so the back button in the browser doesn't always just take you back to the dashboard. On hold for now.

We should have a navbar so you don't always have to go back to the dashboard to go to other pages.

CSTN - the guest didn't choose a room type. So, they can get assigned any type. Add another room type option to room_types and figure out how to implement.

Implement Passport JS auth into React... useContext?

------------------------------------------------------

do we need to flag res_rooms as being paid or is the fact that they've been checked_out enough?

what other charge_types should we have (currently, we have: Phone, Laundry, Parking, Room Service, Restaurant, Wifi, Television, Misc)?

------------------------------------------------------

each invoice_id can have multiple:
 - charge_types
 - taxes
 - payment_types

------------------------------------------------------

Before making an invoice, we need to do the following:

 - know the the res_room_id associated with the invoice
 - get the number of nights and rate for the res_room
 - get the charges associated with each res_room by reservation_id and res_room_id
 - calculate the taxes for each res_room
 - process the payment(s) and make sure they match the total_due

 ------------------------------------------------------

Each res_room gets an invoice... not each reservation and some total of res_rooms.

Add a cash field to res_rooms so they can't put any charges on the room (it's been added and called allow_charges).

Have a way to have special room rates (for groups/companies... which are lower, certain days of the week... which are higher).

Add a company_id field (nullable) to the customer, reservation or res_romm (not sure which) table (it's been added to the reservations table).

 ------------------------------------------------------

When an invoice is being created, these things need to happen:

These are now done via a single model method using a transaction
 - Room.updateRoomCheckedOutById
 - ResRoom.updateResRoomCheckoutById

These are now done via a single model method using a transaction
 - Invoice.addNewInvoice
 - InvoiceTax.addNewInvoiceTaxes (needs the newly created invoice_id)
 - InvoicePayment.addNewInvoicePayments (needs the newly created invoice_id)

Now that both of the above have been combined into the 'addNewInvoice' invoice model method, can I delete the 'updateResRoomCheckinById' and 'updateResRoomCheckoutById' res_room model methods?
 ------------------------------------------------------

Maybe try to switch over models/auth.js and controllers/authController to async/await... but maybe not

Finish the '/api/auth' section in api docs.

Set the proper redirects (if any) in authController

------------------------------------------------------

The following are stored as decimal values and will always be received as strings. They will need to be converted to numbers after they are received from the database.
 - room_types.rate
 - res_rooms.rate
 - taxes.tax_rate
 - charges.chare_amount
 - invoices.total_due
 - invoice_taxes.tax_amount
 - invoice_payments.payment_amount

------------------------------------------------------

The following controllers have  // this route needs some tinkering to implement "data[0] ? res.json(data[0]) : next(data[1]);"

reservationsController.js
roomTypesController.js



hotel_worx_3_db.sql had some changes to the users and access_levels tables, so the seeds spreadsheet might need to be updated too.

Figure out why the "getRoomTypeAvailability" room_type model method on the "/api/room-types/availability/:date" route doesn't return just an array of daily availablility.

------------------------------------------------------

The user table in the database needs an email field.

Need a schema and validation check for the /api/room-types/availability/:date route, plus a test or two.

The invoicesController needs a PUT route.

The invoices and reservations routes need joi schema/helpers/tests.

Work on coding-notes/joi.md.

------------------------------------------------------

in the controller:

------------------------------------

change these lines near the beginning from:
const { isChargeTypeValid } = require('./validation/chargeTypesValidation');
const { idRegEx, idErrorObj } = require('./validation/idValidation');
const { postError, putError, deleteError } = require('./validation/generalValidation');

to:
const { postError, putError, deleteError } = require('./utils/errorMessages');
const { someSchema, someIdSchema } = require('./validation/schema/someSchema');
const isSomeIdValid = require('./validation/helpers/isSomeIdValid');

------------------------------------

get rid of all these line (there should be one in each route with an :id param and even in some PUT routes):
if (!idRegEx.test(req.params.id)) return res.status(400).json(idErrorObj);

------------------------------------

change all:
if (error) next(error);

to:
if (error) return next(error)

------------------------------------

change all:
res.status(400).json({ message:

to:
res.status(400).json({ Error:

------------------------------------

add (as the first line inside the try block where there are :id params):
await someIdSchema.validateAsync({ some_id: req.params.id });

------------------------------------

in the PUT route, replace:
const [result, errorObj] = await isSomethingValid(paramsObj);
if (!result) return res.status(400).json(errorObj);

with:
await someSchema.validateAsync(paramsObj);
await isSomeIdValid(paramsObj.some_id);

------------------------------------

in the POST route, replace:
const [result, errorObj] = await isSomethingValid(paramsObj);
if (!result) return res.status(400).json(errorObj);

with:
await someSchema.validateAsync(paramsObj);

------------------------------------

in the DELETE route, add this after the also added schema line:
await isSomeIdValid(req.params.id);

------------------------------------------------------

in the API test files:

get rid of all:
response.body.should.have.property('errorArray').and.to.be.an('array').and.have.lengthOf(2);

------------------------------------

change all:
response.body.should.have.property('message').and.to.be.a('string');

to (most cases):
response.body.should.have.property('Validation error').and.to.be.a('string');

or (when checking for the existence of a valid id):
response.body.should.have.property('Invalid request').and.to.be.a('string');

------------------------------------

change the wording in it() statement of the failing POST and PUT routes to say:
...return an error because one or more parameters are invalid

or:
...return an error because the some_id does not exist

------------------------------------------------------

make sure the schema file for each controller is in place

helper files seem to be ready
